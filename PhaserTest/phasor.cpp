#include "daisysp.h"
#include "daisy_seed.h"

////////////////////  Namespace Declarations  ////////////////////
using namespace daisysp;
using namespace daisy;
using namespace daisy::seed; // include for LED init

////////////////////  Global Variables  ////////////////////
static DaisySeed  hw;
static Phasor     ramp;     //// Audio Effect Object

static GPIO LED1;
static Switch button1;

bool button1On = false;
float pot1;

////////////////////  Function Prototypes  ////////////////////

void UpdateButtons(bool &b1);



//generates a sine wave whose frequency is modulated 
//by a ramp waveform generated by the Phasor object. 
//The sine wave is output to both left and right channels.
void AudioCallback(AudioHandle::InterleavingInputBuffer  in,
                AudioHandle::InterleavingOutputBuffer out, 
                size_t size) 
{
  //initialize input and output audio
  float outl;
  float inl;

  //set the output audio to the input and apply an effect if button is active
  for(size_t i = 0; i < size; i += 2)
  {
    //set input and output
    inl = in[i];
    outl = inl;
    
    if(button1On){ 
        // Get Phasor output and multiply it with the input sample
        outl = inl * ramp.Process();
    }

    // Increase the volume by multiplying with a gain factor 
    const float gain = 15.0f;
    outl *= gain;
    
    //copy the processed audio to the R and L channels of output
    out[i] = outl;
    out[i + 1] = outl;
  }
}


int main(void) {
    // initialize seed hardware and daisysp modules
    float sample_rate;
    hw.Configure();
    hw.Init();
    hw.SetAudioBlockSize(4);
    sample_rate = hw.AudioSampleRate();

    // initialize button and LED
    LED1.Init(D21, GPIO::Mode::OUTPUT);
    button1.Init(hw.GetPin(26), 1000);

    // initialize Phasor module
    ramp.Init(sample_rate);
    ramp.SetFreq(10.f);



    // start callback
    hw.StartAudio(AudioCallback);
    

    // loop that continously runs
    while(1) {
        // Update button state and LED
        UpdateButtons(button1On);
        LED1.Write(button1On);
    }
}


////////////////////  Helper Functions  ////////////////////

void UpdateButtons(bool &b1) {
    button1.Debounce();
    button1On = button1.Pressed();
}